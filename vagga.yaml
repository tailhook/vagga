containers:

  docs:
    setup:
    - !Alpine v3.8
    - !Repo community
    - !Install [alpine-base, py2-sphinx, make]
    - !Py2Requirements docs/requirements.txt

  rust-musl:
    environ: &rustenv
      LD_LIBRARY_PATH: /musl/lib/rustlib/x86_64-unknown-linux-musl/lib
      PATH: /musl/bin:/usr/local/bin:/usr/bin:/bin
      HOME: /work/target
    setup:
    - !Ubuntu focal
    - !UbuntuUniverse
    - !Install [build-essential, ca-certificates, cmake, zlib1g-dev]
    - !Install [file]  # dependency of checkinstall (bug #46)

    - !TarInstall
      url: "https://static.rust-lang.org/dist/rust-1.56.0-x86_64-unknown-linux-gnu.tar.gz"
      script: "./install.sh --prefix=/usr --components=rustc,rust-std-x86_64-unknown-linux-gnu,cargo"
    - !TarInstall
      url: "https://static.rust-lang.org/dist/rust-std-1.56.0-x86_64-unknown-linux-musl.tar.gz"
      script: "./install.sh --prefix=/musl \
               --components=rust-std-x86_64-unknown-linux-musl"
    - !Sh 'ln -s /musl/lib/rustlib/x86_64-unknown-linux-musl /usr/lib/rustlib/x86_64-unknown-linux-musl'
    - !Install [musl-tools]
    - !TarInstall
      url: "https://static.rust-lang.org/dist/rust-std-1.56.0-wasm32-unknown-unknown.tar.gz"
      script: "./install.sh --prefix=/usr --components=rust-std-wasm32-unknown-unknown"
    - &bulk !Tar
      url: "https://github.com/tailhook/bulk/releases/download/v0.4.9/bulk-v0.4.9.tar.gz"
      sha256: 23471a9986274bb4b7098c03e2eb7e1204171869b72c45385fcee1c64db2d111
      path: /

    # For packaging
    - !Install [make, checkinstall, git, uidmap, wget, gcc, libc6-dev, ca-certificates]

  musleabihf:
    environ:
      HOME: /work/target
    setup:
    - !Ubuntu focal
    - !UbuntuUniverse
    - !Text
      /etc/apt/sources.list.d/arm.list: |
        deb [arch=armhf] http://ports.ubuntu.com/ubuntu-ports focal universe
    - !Install
      - build-essential
      - git
      - ca-certificates
      - cmake
      - zlib1g-dev
      - gcc-arm-linux-gnueabihf
      - g++-arm-linux-gnueabihf
    - !Sh dpkg --add-architecture armhf
    - !Install [musl-dev:armhf]
    - !TarInstall
      url: "https://static.rust-lang.org/dist/rust-1.56.0-x86_64-unknown-linux-gnu.tar.gz"
      script: "./install.sh --prefix=/usr --components=rustc,rust-std-x86_64-unknown-linux-gnu,cargo"
    - !TarInstall
      url: "https://static.rust-lang.org/dist/rust-std-1.56.0-arm-unknown-linux-musleabihf.tar.gz"
      script: "./install.sh --prefix=/usr \
               --components=rust-std-arm-unknown-linux-musleabihf"

  testbase:
    setup:
    - !Ubuntu focal
    - !UbuntuUniverse
    - !BuildDeps [wget]
    - !Install [make, curl, zip, file, git]
    - !Sh |
        set -ex
        cd /tmp
        git clone git://github.com/bats-core/bats-core
        git clone git://github.com/bats-core/bats-support.git /bats/bats-support
        git clone git://github.com/bats-core/bats-assert.git /bats/bats-assert
        cd bats-core
        ./install.sh /usr

  test:
    setup:
    - !Container testbase
    - !Depends vagga
    - !Depends apk
    - !Depends busybox
    - !Depends alpine-keys.apk
    - !Sh make install
    auto-clean: true

commands:

  print-env: !Command
    container: docs
    run: [env]

  doc: !Command
    description: Build vagga documentation
    container: docs
    run: [make, html]
    work-dir: docs
    epilog: |
      --------------------------------------------------------
        xdg-open docs/_build/html/index.html

  make: !Command
    description: Build vagga
    container: rust-musl
    run: [make]

  make-no-containers: !Command
    description: Build no-containers build of vagga
    container: rust-musl
    environ:
      VAGGA_VERSION: v0.0.0-dev
    run: |
      set -ex
      cargo build --target=x86_64-unknown-linux-musl \
        --no-default-features --features=config_runner
      cp --remove-destination target/x86_64-unknown-linux-musl/debug/vagga \
         ./vagga-no-containers

  make-release: !Command
    description: Build vagga with optimizations
    container: rust-musl
    run: [make, release]

  make-arm: !Command
    description: Cross-compile vagga for arm
    container: musleabihf
    environ:
      CFLAGS: -I/usr/include/arm-linux-musleabihf
      CC: arm-linux-gnueabihf-gcc
    run: |
      export VAGGA_VERSION=$(git describe)
      exec cargo rustc --target=arm-unknown-linux-musleabihf -- -C linker="arm-linux-gnueabihf-gcc"

  cargo: !Command
    description: Run arbitrary cargo command
    container: rust-musl
    symlink-name: cargo
    environ:
      VAGGA_VERSION: v0.0.0-test
      RUST_BACKTRACE: 1
    run: [cargo]

  test-internal: !Command
    description: Run rust tests of vagga
    container: rust-musl
    environ:
      VAGGA_VERSION: v0.0.0-test
      RUST_BACKTRACE: 1
    run: [cargo, test]

  build-packages: !Command
    description: Create an ubuntu (.deb) package using checkinstall in
      container and tar.gz. Both put into `dist/`
    container: rust-musl
    write-mode: transient-hard-link-copy
    environ:
      PATH: /musl/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
    run: |
      set -ex
      rm target/x86_64-unknown-linux-musl/release/vagga || true # force rebuild
      make release
      make ubuntu-package CHECKINSTALL_FLAGS=--strip=no
      make tarball

  build-packages-testing: !Command
    description: Same as build-packages but with debugging info enabled
    container: rust-musl
    write-mode: transient-hard-link-copy
    environ:
      PATH: /musl/bin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin
    run: |
      set -ex
      rm target/x86_64-unknown-linux-musl/debug/vagga || true # force rebuild
      make all
      make ubuntu-package CHECKINSTALL_FLAGS=--strip=no
      make tarball

  _package: !Command
    description: Create a new kind of package with bulk
    container: rust-musl
    run: |
      set -ex
      version="$(git describe --dirty)"
      rm -rf dist/pkg
      rm target/x86_64-unknown-linux-musl/release/vagga || true # force rebuild
      bulk with-version $version \
        make release
      DESTDIR=dist/pkg ./install.sh
      bulk with-version $version \
        bulk pack --dir dist/pkg

  test: !Command
    description: Run self tests
    container: test
    accepts-arguments: true
    run: |
      set -ex
      rm -rf tests/*/.vagga
      export HOME=/work/tmp/home
      mkdir -p $HOME /work/tmp/cache || true
      export VAGGA_SETTINGS="
        cache-dir: /work/tmp/cache
        ubuntu-mirror: $UBUNTU_MIRROR
        alpine-mirror: $ALPINE_MIRROR"
      if [ -n "$*" ]; then
        bats "$@"
      else
        bats tests
      fi

  _bulk: !Command
    description: Run any bulk command
    container: rust-musl
    run: [bulk]
